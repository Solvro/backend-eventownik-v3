generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String            @id @default(uuid())
  first_name String   @db.VarChar(255)
  last_name  String   @db.VarChar(255)
  password   String   @db.VarChar(255)
  email      String   @unique @db.VarChar(255)
  type       String   @default("organizer") @db.VarChar(50)
  active     Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  events     Event[]          @relation("Organizer")
  permissions AdminPermission[]
}

model AdminPermission {
  id           String     @id @default(uuid())
  event_id     String
  permission_id String
  admin_id     String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  admin        Admin      @relation(fields: [admin_id], references: [id])
  event        Event      @relation(fields: [event_id], references: [id])
  permission   Permission @relation(fields: [permission_id], references: [id])
}

model Permission {
  id       String           @id @default(uuid())
  action   String @db.VarChar(255)
  subject  String @db.VarChar(255)

  admin_permissions AdminPermission[]
}

model Event {
  id                String      @id @default(uuid())
  organizer_id      String?
  register_form_id  String?
  name              String   @db.VarChar(255)
  description       String?  @db.Text
  start_date        DateTime
  end_date          DateTime
  primary_color     String?  @db.VarChar(12)
  organizer         String?  @db.VarChar(255)
  participants_limit Int?
  photo_url         String?  @db.VarChar(255)
  links             String?  @db.Text
  location          String?  @db.VarChar(255)
  contact_email     String?  @db.VarChar(255)
  verified_at       DateTime?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())
  slug              String?  @db.VarChar(255)
  is_private        Boolean?
  policy_links      String?  @db.Text

  organizer_admin   Admin?      @relation("Organizer", fields: [organizer_id], references: [id])
  register_form     Form?       @relation("RegisterForm", fields: [register_form_id], references: [id])
  attributes        Attribute[]
  emails            Email[]
  forms             Form[]      @relation("EventForms")
  admin_permissions AdminPermission[]
  participants      Participant[]
}

model Attribute {
  id           String           @id @default(uuid())
  name         String?  @db.VarChar(255)
  event_id     String
  show_in_list Boolean  @default(true)
  options      String?  @db.Text
  type         String   @db.VarChar(50)
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  event        Event            @relation(fields: [event_id], references: [id])
  blocks       Block[]
  form_definitions FormDefinition[]
  participant_attributes ParticipantAttribute[]
}

model Block {
  id           String   @id @default(uuid())
  name         String?  @db.VarChar(255)
  description  String?  @db.Text
  capacity     Int?
  parent_id    String?
  attribute_id String?
  order        Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  parent       Block?    @relation("BlockToBlock", fields: [parent_id], references: [id])
  children     Block[]   @relation("BlockToBlock")
  attribute    Attribute? @relation(fields: [attribute_id], references: [id])
}

model Email {
  id              String    @id @default(uuid())
  event_id        String?
  name            String   @db.VarChar(255)
  content         String   @db.Text
  trigger         String   @db.VarChar(255)
  trigger_value   String?  @db.VarChar(255)
  trigger_value_2 String?  @db.VarChar(255)
  form_id         String?
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  event           Event?     @relation(fields: [event_id], references: [id])
  form            Form?      @relation(fields: [form_id], references: [id])
  participant_emails ParticipantEmail[]
  participant_forms ParticipantForm[]
}

model Form {
  id           String     @id @default(uuid())
  name         String   @db.VarChar(255)
  description  String? @db.Text
  open_date    DateTime?
  close_date   DateTime?
  event_id     String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())
  is_editable  Boolean?

  event        Event?     @relation("EventForms", fields: [event_id], references: [id])
  form_definitions FormDefinition[]
  emails       Email[]
  participant_forms ParticipantForm[]
  register_event Event[] @relation("RegisterForm")
}

model FormDefinition {
  id           String    @id @default(uuid())
  attribute_id String?
  form_id      String?
  is_required  Boolean   @default(true)
  order        Int?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  attribute    Attribute? @relation(fields: [attribute_id], references: [id])
  form         Form?      @relation(fields: [form_id], references: [id])
}

model Participant {
  id           String     @id @default(uuid())
  email        String   @db.VarChar(255)
  event_id     String
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now())

  event        Event      @relation(fields: [event_id], references: [id])
  attributes   ParticipantAttribute[]
  emails       ParticipantEmail[]
  forms        ParticipantForm[]
  attribute_logs ParticipantAttributeLog[]
}

model ParticipantAttribute {
  id             String     @id @default(uuid())
  participant_id String
  attribute_id   String
  value          String?  @db.Text
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  participant    Participant @relation(fields: [participant_id], references: [id])
  attribute      Attribute   @relation(fields: [attribute_id], references: [id])
}

model ParticipantEmail {
  id             String     @id @default(uuid())
  participant_id String?
  email_id       String?
  send_at        DateTime
  send_by        String?  @db.VarChar(255)
  status         String   @db.VarChar(50)
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now())

  participant    Participant? @relation(fields: [participant_id], references: [id])
  email          Email?       @relation(fields: [email_id], references: [id])
}

model ParticipantForm {
  id               String     @id @default(uuid())
  participant_id   String
  form_id          String
  email_id         String?
  last_opened_at   DateTime?
  last_submitted_at DateTime?
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  participant      Participant @relation(fields: [participant_id], references: [id])
  form             Form        @relation(fields: [form_id], references: [id])
  email            Email?      @relation(fields: [email_id], references: [id])
}

model ParticipantAttributeLog {
  id            String     @id @default(uuid())
  participant_id String
  triggered_by  String   @db.VarChar(50)
  triggered_id  String?
  attribute_id  String?
  before        String?  @db.Text
  after         String?  @db.Text
  created_at    DateTime @default(now())

  participant   Participant @relation(fields: [participant_id], references: [id])
}