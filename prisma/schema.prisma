generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizerType {
  organizer
  superadmin
}

model Admin {
  uuid      String        @id @default(uuid()) @db.Uuid
  firstName String
  lastName  String
  password  String
  email     String        @unique
  type      OrganizerType @default(organizer)
  active    Boolean       @default(true)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  events          Event[]           @relation("Organizer")
  permissions     AdminPermission[]
  AuthAccessToken AuthAccessToken?

  @@map("Admins")
}

model AdminPermission {
  uuid           String   @id @default(uuid()) @db.Uuid
  eventUuid      String   @db.Uuid
  permissionUuid String   @db.Uuid
  adminUuid      String   @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  admin      Admin      @relation(fields: [adminUuid], references: [uuid], onDelete: Cascade)
  event      Event      @relation(fields: [eventUuid], references: [uuid], onDelete: Cascade)
  permission Permission @relation(fields: [permissionUuid], references: [uuid], onDelete: Cascade)

  @@map("AdminsPermissions")
}

model Permission {
  uuid    String @id @default(uuid()) @db.Uuid
  action  String
  subject String

  adminPermissions AdminPermission[]

  @@map("Permissions")
}

model Event {
  uuid              String    @id @default(uuid()) @db.Uuid
  name              String
  links             String[]  @default([])
  policyLinks       String[]  @default([])
  startDate         DateTime
  endDate           DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  participantsLimit Int?
  verifiedAt        DateTime?
  description       String?
  primaryColor      String?
  organizerName     String?
  photoUrl          String?
  location          String?
  contactEmail      String?
  slug              String?   @unique
  organizerUuid     String?   @db.Uuid
  registerFormUuid  String?   @db.Uuid

  organizerAdmin   Admin?            @relation("Organizer", fields: [organizerUuid], references: [uuid], onDelete: Cascade)
  registerForm     Form?             @relation("RegisterForm", fields: [registerFormUuid], references: [uuid], onDelete: Cascade)
  attributes       Attribute[]
  emails           Email[]
  forms            Form[]            @relation("EventForms")
  adminPermissions AdminPermission[]
  participants     Participant[]

  @@map("Events")
}

enum AttributeType {
  text
  textArea
  number
  file
  select
  block
  date
  time
  datetime
  multiSelect
  email
  tel
  color
  checkbox
}

model Attribute {
  uuid       String        @id @default(uuid()) @db.Uuid
  eventUuid  String        @db.Uuid
  type       AttributeType
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  showInList Boolean       @default(true)
  order      Int
  options    String[]      @default([])
  name       String?

  event                 Event                  @relation(fields: [eventUuid], references: [uuid], onDelete: Cascade)
  blocks                Block[]
  formDefinitions       FormDefinition[]
  participantAttributes ParticipantAttribute[]

  @@map("Attributes")
}

model Block {
  uuid          String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  capacity      Int?
  order         Int?
  name          String?
  description   String?
  parentUuid    String?  @db.Uuid
  attributeUuid String?  @db.Uuid

  parent    Block?     @relation("BlockToBlock", fields: [parentUuid], references: [uuid], onDelete: Cascade)
  children  Block[]    @relation("BlockToBlock")
  attribute Attribute? @relation(fields: [attributeUuid], references: [uuid], onDelete: Cascade)

  @@map("Blocks")
}

enum EmailTrigger {
  PARTICIPANT_REGISTERED
  PARTICIPANT_DELETED
  FORM_FILLED
  ATTRIBUTE_CHANGED
  MANUAL
}

model Email {
  uuid          String       @id @default(uuid()) @db.Uuid
  name          String
  content       String
  trigger       EmailTrigger
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  triggerValue  String?
  triggerValue2 String?
  eventUuid     String?      @db.Uuid
  formUuid      String?      @db.Uuid

  event             Event?             @relation(fields: [eventUuid], references: [uuid], onDelete: Cascade)
  form              Form?              @relation(fields: [formUuid], references: [uuid], onDelete: Cascade)
  participantEmails ParticipantEmail[]
  participantForms  ParticipantForm[]

  @@map("Emails")
}

model Form {
  uuid        String    @id @default(uuid()) @db.Uuid
  name        String
  isEditable  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  openDate    DateTime?
  closeDate   DateTime?
  description String?
  eventUuid   String?   @db.Uuid

  event            Event?            @relation("EventForms", fields: [eventUuid], references: [uuid], onDelete: Cascade)
  formDefinitions  FormDefinition[]
  emails           Email[]
  participantForms ParticipantForm[]
  registerEvent    Event[]           @relation("RegisterForm")

  @@map("Forms")
}

model FormDefinition {
  uuid          String   @id @default(uuid()) @db.Uuid
  isRequired    Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  order         Int?
  attributeUuid String?  @db.Uuid
  formUuid      String?  @db.Uuid

  attribute Attribute? @relation(fields: [attributeUuid], references: [uuid], onDelete: Cascade)
  form      Form?      @relation(fields: [formUuid], references: [uuid], onDelete: Cascade)

  @@map("FormsDefinitions")
}

model Participant {
  uuid      String   @id @default(uuid()) @db.Uuid
  email     String
  eventUuid String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  event         Event                     @relation(fields: [eventUuid], references: [uuid], onDelete: Cascade)
  attributes    ParticipantAttribute[]
  emails        ParticipantEmail[]
  forms         ParticipantForm[]
  attributeLogs ParticipantAttributeLog[]

  @@map("Participants")
}

model ParticipantAttribute {
  uuid            String   @id @default(uuid()) @db.Uuid
  participantUuid String   @db.Uuid
  attributeUuid   String   @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  value           String?

  participant Participant @relation(fields: [participantUuid], references: [uuid], onDelete: Cascade)
  attribute   Attribute   @relation(fields: [attributeUuid], references: [uuid], onDelete: Cascade)

  @@map("ParticipantsAttributes")
}

enum EmailStatus {
  pending
  sent
  failed
}

model ParticipantEmail {
  uuid            String      @id @default(uuid()) @db.Uuid
  status          EmailStatus
  sendAt          DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sendBy          String?
  participantUuid String?     @db.Uuid
  emailUuid       String?     @db.Uuid

  participant Participant? @relation(fields: [participantUuid], references: [uuid], onDelete: Cascade)
  email       Email?       @relation(fields: [emailUuid], references: [uuid], onDelete: Cascade)

  @@map("ParticipantsEmails")
}

model ParticipantForm {
  uuid            String    @id @default(uuid()) @db.Uuid
  participantUuid String    @db.Uuid
  formUuid        String    @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastOpenedAt    DateTime?
  lastSubmittedAt DateTime?
  emailUuid       String?   @db.Uuid

  participant Participant @relation(fields: [participantUuid], references: [uuid], onDelete: Cascade)
  form        Form        @relation(fields: [formUuid], references: [uuid], onDelete: Cascade)
  email       Email?      @relation(fields: [emailUuid], references: [uuid], onDelete: Cascade)

  @@map("ParticipantsForms")
}

model ParticipantAttributeLog {
  uuid            String   @id @default(uuid()) @db.Uuid
  participantUuid String   @db.Uuid
  triggeredBy     String
  createdAt       DateTime @default(now())
  triggeredUuid   String?  @db.Uuid
  attributeUuid   String?  @db.Uuid
  before          String?
  after           String?

  participant Participant @relation(fields: [participantUuid], references: [uuid], onDelete: Cascade)

  @@map("ParticipantsAttributesLogs")
}

model AuthAccessToken {
  id          Int      @id @default(autoincrement())
  tokenableId String   @unique @map("tokenable_id") @db.Uuid
  type        String
  name        String?
  hash        String
  abilities   String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")

  admin Admin @relation(fields: [tokenableId], references: [uuid])

  @@map("AuthAccessTokens")
}